{"version":3,"sources":["../src/plugin-hooks/useBlockLayout.js","../src/utils.js","../src/hooks/useTable.js","../src/actions.js","../src/plugin-hooks/useExpanded.js","../src/filterTypes.js","../src/plugin-hooks/useFilters.js","../src/aggregations.js","../src/plugin-hooks/useGroupBy.js","../src/sortTypes.js","../src/plugin-hooks/useSortBy.js","../src/plugin-hooks/usePagination.js","../src/plugin-hooks/useRowSelect.js","../src/plugin-hooks/useRowState.js","../src/plugin-hooks/useColumnOrder.js","../src/plugin-hooks/useResizeColumns.js","../src/plugin-hooks/useAbsoluteLayout.js","../src/components/Tables/SortedTable.js","../src/components/Tables/Simple.js"],"names":["defaultColumn","Cell","cell","value","String","show","width","minWidth","maxWidth","Number","MAX_SAFE_INTEGER","safeUseLayoutEffect","window","React","useLayoutEffect","useEffect","findMaxDepth","columns","depth","reduce","prev","curr","Math","max","decorateColumn","column","userDefaultColumn","parent","index","id","accessor","Header","accessorPath","split","row","getBy","console","error","Error","decorateColumnTree","map","columnIndex","makeHeaderGroups","flatColumns","headerGroups","buildGroup","headerGroup","headers","parentColumns","hasParents","some","col","forEach","isFirst","length","latestParentColumn","reverse","similarParentColumns","filter","d","originalID","push","join","placeholderColumn","placeholderOf","includes","totalHeaderCount","sum","header","determineHeaderVisibility","instance","totalVisibleHeaderCount","subHeader","handleColumn","parentVisible","isVisible","subColumn","obj","path","def","pathObj","val","makePathArray","cursor","pathPart","e","defaultOrderByFn","arr","funcs","dirs","sort","rowA","rowB","i","sortFn","desc","sortInt","getFirstDefined","defaultGroupByFn","rows","columnID","resKey","values","Array","isArray","getElementDimensions","element","rect","getBoundingClientRect","style","getComputedStyle","margins","left","parseInt","marginLeft","right","marginRight","padding","paddingLeft","paddingRight","ceil","outerWidth","scrollWidth","flexRender","Comp","props","isReactComponent","isClassComponent","component","Object","getPrototypeOf","isFunctionComponent","mergeProps","groups","className","rest","Boolean","applyHooks","hooks","initial","args","next","nextValue","applyPropHooks","warnUnknownProps","keys","JSON","stringify","isFunction","a","flattenBy","childKey","recurse","ensurePluginOrder","plugins","befores","pluginName","afters","pluginIndex","findIndex","plugin","before","beforeIndex","after","afterIndex","expandRows","manualExpandedKey","expanded","expandSubRows","expandedRows","handleRow","key","isExpanded","original","canExpand","subRows","flattenDeep","replace","newArr","propTypes","data","PropTypes","array","isRequired","arrayOf","object","getSubRows","func","getRowID","debug","bool","renderErr","defaultState","defaultInitialState","defaultColumnInstance","defaultReducer","old","newState","defaultGetSubRows","defaultGetRowID","useTable","checkPropTypes","userColumns","initialState","userState","state","reducer","useState","originalState","originalSetState","useMemo","setState","useCallback","updater","type","instanceRef","useRef","assign","current","columnsBeforeHeaderGroups","columnsBeforeHeaderGroupsDeps","useBeforeDimensions","useMain","useRows","prepareRow","getTableProps","getTableBodyProps","getRowProps","getHeaderGroupProps","getHeaderProps","getCellProps","newColumns","flatRows","accessRow","originalRow","parentPath","rowID","cells","unpreparedAccessWarning","undefined","flatHeaders","all","calculateDimensions","render","userProps","colSpan","columnPathStr","totalColumnsWidth","calculateHeaderWidths","sumTotalWidth","subHeaders","totalLeft","totalWidth","min","actions","addActions","acts","action","string","paginateExpandedRows","useExpanded","getExpandedToggleProps","toggleExpandedByPath","set","exists","shouldExist","newExpanded","Set","add","delete","toggleExpanded","onClick","persist","title","expandedDepth","findExpandedDepth","maxDepth","text","filterValue","rowValue","toLowerCase","autoRemove","exactText","exactTextCase","includesAll","every","exact","equals","between","Infinity","temp","filters","shape","disableFilters","Filter","any","manualFilters","useFilters","userFilterTypes","filterTypes","preFilteredRows","preFilteredFlatRows","setFilter","find","filterMethod","getFilterMethod","newFilter","shouldAutoRemove","columnDisableFilters","canFilter","filteredRows","filteredFlatRows","filterRows","entries","filteredSoFar","warn","setAllFilters","newFilters","average","round","median","uniqueCount","size","count","groupBy","aggregate","oneOfType","disableGrouping","Aggregated","groupByFn","manualGrouping","aggregations","useGroupBy","deps","groupByColumns","g","nonGroupByColumns","groupByBoundaryColumnIndex","groupByBoundary","slice","manualGroupBy","userAggregations","columnDisableGrouping","isGrouped","groupedIndex","indexOf","canGroupBy","toggleGroupBy","toggle","resolvedToggle","getGroupByToggleProps","groupByID","isRepeatedValue","isAggregated","groupedRows","groupRecursively","groupByVal","isSourceRows","columnValues","aggregator","info","aggregateFn","aggregateRowsToValues","preGroupedRows","reSplitAlphaNumeric","alphanumeric","getRowValueByColumnID","b","toString","aa","shift","bb","an","bn","combo","isNaN","datetime","compareBasic","getTime","basic","sortBy","sortType","sortDescFirst","disableSorting","orderByFn","sortTypes","manualSorting","disableMultiSort","isMultiSortEvent","maxMultiSortColCount","number","disableSortRemove","disableMultiRemove","useSortBy","userSortTypes","shiftKey","getSortByToggleProps","toggleSortBy","multi","existingSortBy","existingIndex","hasDescDefined","newSortBy","splice","sortByChange","columnDisableSorting","canSort","clearSorting","columnSort","isSorted","sortedIndex","isSortedDesc","sortedRows","availableSortBy","sortData","sortedData","sortMethod","sortInverted","preSortedRows","pageSize","pageIndex","manualPagination","usePagination","disablePageResetOnDataChange","userPageCount","pageCount","rowDep","isPageIndexMountedRef","disablePageResetOnDataChangeRef","pageChange","pageOptions","page","process","pageStart","pageEnd","canPreviousPage","canNextPage","gotoPage","newPageIndex","previousPage","nextPage","setPageSize","topRowIndex","floor","pageSizeChange","selectedRowPaths","manualRowSelectedKey","useRowSelect","getToggleRowSelectedProps","getToggleAllRowsSelectedProps","selectedFlatRows","subRowPaths","isSelected","disableSelectedRowsResetOnDataChange","flatRowPaths","isAllRowsSelected","isRowSelectedMountedRef","disableSelectedRowsResetOnDataChangeRef","toggleRowSelectedAll","toggleRowSelected","childRowPrefixKey","newSelectedRows","rowPath","startsWith","updateParentRow","parentKey","has","checked","onChange","target","rowState","initialRowStateAccessor","useRowState","setRowState","pathKey","setCellState","cellState","rowsMountedRef","columnOrder","useColumnOrder","columnsCopy","columnOrderCopy","columnsInOrder","targetColumnID","foundIndex","setColumnOrder","columnResizing","columnWidths","canResize","useResizeColumns","getResizerProps","disableResizing","position","isResizing","isResizingColumn","onMouseDown","headersToResize","getLeafHeaders","startWidths","startX","clientX","onMouseMove","currentX","percentageDeltaX","newColumnWidths","document","addEventListener","onMouseUp","removeEventListener","draggable","leafHeaders","recurseHeader","useAbsoluteLayout","rowStyles","cellStyles","top","useBlockLayout","display","boxSizing","SortedTable","theadRows","tbodyRows","Simple","makeData","Style","styled","div","range","len","newPerson","statusChance","random","firstName","lastName","age","visits","progress","status","lens","makeDataLevel"],"mappings":"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","file":"Simple.b00f2bb4.js","sourceRoot":"../public","sourcesContent":["import PropTypes from 'prop-types'\n\nconst propTypes = {}\n\nexport const useBlockLayout = hooks => {\n  hooks.useMain.push(useMain)\n}\n\nuseBlockLayout.pluginName = 'useBlockLayout'\n\nconst useMain = instance => {\n  PropTypes.checkPropTypes(propTypes, instance, 'property', 'useBlockLayout')\n\n  const {\n    totalColumnsWidth,\n    hooks: { getRowProps, getHeaderGroupProps, getHeaderProps, getCellProps },\n  } = instance\n\n  const rowStyles = {\n    style: {\n      display: 'flex',\n      width: `${totalColumnsWidth}px`,\n    },\n  }\n\n  getRowProps.push(() => rowStyles)\n  getHeaderGroupProps.push(() => rowStyles)\n\n  const cellStyles = {\n    display: 'inline-block',\n    boxSizing: 'border-box',\n  }\n\n  getHeaderProps.push(header => {\n    return {\n      style: {\n        ...cellStyles,\n        width: `${header.totalWidth}px`,\n      },\n    }\n  })\n\n  getCellProps.push(cell => {\n    return {\n      style: {\n        ...cellStyles,\n        width: `${cell.column.totalWidth}px`,\n      },\n    }\n  })\n\n  return instance\n}\n","import React from 'react'\n\nexport const defaultColumn = {\n  Cell: ({ cell: { value = '' } }) => String(value),\n  show: true,\n  width: 150,\n  minWidth: 0,\n  maxWidth: Number.MAX_SAFE_INTEGER,\n}\n\n// SSR has issues with useLayoutEffect still, so use useEffect during SSR\nexport const safeUseLayoutEffect =\n  typeof window !== 'undefined' && process.env.NODE_ENV === 'production'\n    ? React.useLayoutEffect\n    : React.useEffect\n\n// Find the depth of the columns\nexport function findMaxDepth(columns, depth = 0) {\n  return columns.reduce((prev, curr) => {\n    if (curr.columns) {\n      return Math.max(prev, findMaxDepth(curr.columns, depth + 1))\n    }\n    return depth\n  }, 0)\n}\n\nexport function decorateColumn(\n  column,\n  userDefaultColumn,\n  parent,\n  depth,\n  index\n) {\n  // Apply the userDefaultColumn\n  column = { ...defaultColumn, ...userDefaultColumn, ...column }\n\n  // First check for string accessor\n  let { id, accessor, Header } = column\n\n  if (typeof accessor === 'string') {\n    id = id || accessor\n    const accessorPath = accessor.split('.')\n    accessor = row => getBy(row, accessorPath)\n  }\n\n  if (!id && typeof Header === 'string' && Header) {\n    id = Header\n  }\n\n  if (!id && column.columns) {\n    console.error(column)\n    throw new Error('A column ID (or unique \"Header\" value) is required!')\n  }\n\n  if (!id) {\n    console.error(column)\n    throw new Error('A column ID (or string accessor) is required!')\n  }\n\n  column = {\n    // Make sure there is a fallback header, just in case\n    Header: () => <>&nbsp;</>,\n    ...column,\n    // Materialize and override this stuff\n    id,\n    accessor,\n    parent,\n    depth,\n    index,\n  }\n\n  return column\n}\n\n// Build the visible columns, headers and flat column list\nexport function decorateColumnTree(columns, defaultColumn, parent, depth = 0) {\n  return columns.map((column, columnIndex) => {\n    column = decorateColumn(column, defaultColumn, parent, depth, columnIndex)\n    if (column.columns) {\n      column.columns = decorateColumnTree(\n        column.columns,\n        defaultColumn,\n        column,\n        depth + 1\n      )\n    }\n    return column\n  })\n}\n\n// Build the header groups from the bottom up\nexport function makeHeaderGroups(flatColumns, defaultColumn) {\n  const headerGroups = []\n\n  // Build each header group from the bottom up\n  const buildGroup = (columns, depth) => {\n    const headerGroup = {\n      headers: [],\n    }\n\n    const parentColumns = []\n\n    // Do any of these columns have parents?\n    const hasParents = columns.some(col => col.parent)\n\n    columns.forEach(column => {\n      // Are we the first column in this group?\n      const isFirst = !parentColumns.length\n\n      // What is the latest (last) parent column?\n      let latestParentColumn = [...parentColumns].reverse()[0]\n\n      // If the column has a parent, add it if necessary\n      if (column.parent) {\n        const similarParentColumns = parentColumns.filter(\n          d => d.originalID === column.parent.id\n        )\n        if (isFirst || latestParentColumn.originalID !== column.parent.id) {\n          parentColumns.push({\n            ...column.parent,\n            originalID: column.parent.id,\n            id: [column.parent.id, similarParentColumns.length].join('_'),\n          })\n        }\n      } else if (hasParents) {\n        // If other columns have parents, we'll need to add a place holder if necessary\n        const originalID = [column.id, 'placeholder'].join('_')\n        const similarParentColumns = parentColumns.filter(\n          d => d.originalID === originalID\n        )\n        const placeholderColumn = decorateColumn(\n          {\n            originalID,\n            id: [column.id, 'placeholder', similarParentColumns.length].join(\n              '_'\n            ),\n            placeholderOf: column,\n          },\n          defaultColumn\n        )\n        if (\n          isFirst ||\n          latestParentColumn.originalID !== placeholderColumn.originalID\n        ) {\n          parentColumns.push(placeholderColumn)\n        }\n      }\n\n      // Establish the new headers[] relationship on the parent\n      if (column.parent || hasParents) {\n        latestParentColumn = [...parentColumns].reverse()[0]\n        latestParentColumn.headers = latestParentColumn.headers || []\n        if (!latestParentColumn.headers.includes(column)) {\n          latestParentColumn.headers.push(column)\n        }\n      }\n\n      column.totalHeaderCount = column.headers\n        ? column.headers.reduce(\n            (sum, header) => sum + header.totalHeaderCount,\n            0\n          )\n        : 1 // Leaf node columns take up at least one count\n      headerGroup.headers.push(column)\n    })\n\n    headerGroups.push(headerGroup)\n\n    if (parentColumns.length) {\n      buildGroup(parentColumns, depth + 1)\n    }\n  }\n\n  buildGroup(flatColumns, 0)\n\n  return headerGroups.reverse()\n}\n\nexport function determineHeaderVisibility(instance) {\n  const { headers } = instance\n\n  const handleColumn = (column, parentVisible) => {\n    column.isVisible = parentVisible\n      ? typeof column.show === 'function'\n        ? column.show(instance)\n        : !!column.show\n      : false\n\n    let totalVisibleHeaderCount = 0\n\n    if (column.headers && column.headers.length) {\n      column.headers.forEach(\n        subColumn =>\n          (totalVisibleHeaderCount += handleColumn(subColumn, column.isVisible))\n      )\n    } else {\n      totalVisibleHeaderCount = column.isVisible ? 1 : 0\n    }\n\n    column.totalVisibleHeaderCount = totalVisibleHeaderCount\n\n    return totalVisibleHeaderCount\n  }\n\n  let totalVisibleHeaderCount = 0\n\n  headers.forEach(\n    subHeader => (totalVisibleHeaderCount += handleColumn(subHeader, true))\n  )\n}\n\nexport function getBy(obj, path, def) {\n  if (!path) {\n    return obj\n  }\n  const pathObj = makePathArray(path)\n  let val\n  try {\n    val = pathObj.reduce((cursor, pathPart) => cursor[pathPart], obj)\n  } catch (e) {\n    // continue regardless of error\n  }\n  return typeof val !== 'undefined' ? val : def\n}\n\nexport function defaultOrderByFn(arr, funcs, dirs) {\n  return [...arr].sort((rowA, rowB) => {\n    for (let i = 0; i < funcs.length; i += 1) {\n      const sortFn = funcs[i]\n      const desc = dirs[i] === false || dirs[i] === 'desc'\n      const sortInt = sortFn(rowA, rowB)\n      if (sortInt !== 0) {\n        return desc ? -sortInt : sortInt\n      }\n    }\n    return dirs[0] ? rowA.index - rowB.index : rowB.index - rowA.index\n  })\n}\n\nexport function getFirstDefined(...args) {\n  for (let i = 0; i < args.length; i += 1) {\n    if (typeof args[i] !== 'undefined') {\n      return args[i]\n    }\n  }\n}\n\nexport function defaultGroupByFn(rows, columnID) {\n  return rows.reduce((prev, row, i) => {\n    // TODO: Might want to implement a key serializer here so\n    // irregular column values can still be grouped if needed?\n    const resKey = `${row.values[columnID]}`\n    prev[resKey] = Array.isArray(prev[resKey]) ? prev[resKey] : []\n    prev[resKey].push(row)\n    return prev\n  }, {})\n}\n\nexport function getElementDimensions(element) {\n  const rect = element.getBoundingClientRect()\n  const style = window.getComputedStyle(element)\n  const margins = {\n    left: parseInt(style.marginLeft),\n    right: parseInt(style.marginRight),\n  }\n  const padding = {\n    left: parseInt(style.paddingLeft),\n    right: parseInt(style.paddingRight),\n  }\n  return {\n    left: Math.ceil(rect.left),\n    width: Math.ceil(rect.width),\n    outerWidth: Math.ceil(\n      rect.width + margins.left + margins.right + padding.left + padding.right\n    ),\n    marginLeft: margins.left,\n    marginRight: margins.right,\n    paddingLeft: padding.left,\n    paddingRight: padding.right,\n    scrollWidth: element.scrollWidth,\n  }\n}\n\nexport function flexRender(Comp, props) {\n  return isReactComponent(Comp) ? <Comp {...props} /> : Comp\n}\n\nfunction isClassComponent(component) {\n  return (\n    typeof component === 'function' &&\n    !!Object.getPrototypeOf(component).isReactComponent\n  )\n}\n\nfunction isFunctionComponent(component) {\n  return typeof component === 'function'\n}\n\nfunction isReactComponent(component) {\n  return isClassComponent(component) || isFunctionComponent(component)\n}\n\nexport const mergeProps = (...groups) => {\n  let props = {}\n  groups.forEach(({ style = {}, className, ...rest } = {}) => {\n    props = {\n      ...props,\n      ...rest,\n      style: {\n        ...(props.style || {}),\n        ...style,\n      },\n      className: [props.className, className].filter(Boolean).join(' '),\n    }\n  })\n  return props\n}\n\nexport const applyHooks = (hooks, initial, ...args) =>\n  hooks.reduce((prev, next) => {\n    const nextValue = next(prev, ...args)\n    if (typeof nextValue === 'undefined') {\n      throw new Error(\n        'React Table: A hook just returned undefined! This is not allowed.'\n      )\n    }\n    return nextValue\n  }, initial)\n\nexport const applyPropHooks = (hooks, ...args) =>\n  hooks.reduce((prev, next) => mergeProps(prev, next(...args)), {})\n\nexport const warnUnknownProps = props => {\n  if (Object.keys(props).length) {\n    throw new Error(\n      `Unknown options passed to useReactTable:\n\n${JSON.stringify(props, null, 2)}`\n    )\n  }\n}\n\nexport function sum(arr) {\n  return arr.reduce((prev, curr) => prev + curr, 0)\n}\n\nexport function isFunction(a) {\n  if (typeof a === 'function') {\n    return a\n  }\n}\n\nexport function flattenBy(columns, childKey) {\n  const flatColumns = []\n\n  const recurse = columns => {\n    columns.forEach(d => {\n      if (!d[childKey]) {\n        flatColumns.push(d)\n      } else {\n        recurse(d[childKey])\n      }\n    })\n  }\n\n  recurse(columns)\n\n  return flatColumns\n}\n\nexport function ensurePluginOrder(plugins, befores, pluginName, afters) {\n  const pluginIndex = plugins.findIndex(\n    plugin => plugin.pluginName === pluginName\n  )\n\n  if (pluginIndex === -1) {\n    throw new Error(`The plugin ${pluginName} was not found in the plugin list!\nThis usually means you need to need to name your plugin hook by setting the 'pluginName' property of the hook function, eg:\n\n  ${pluginName}.pluginName = '${pluginName}'\n`)\n  }\n\n  befores.forEach(before => {\n    const beforeIndex = plugins.findIndex(\n      plugin => plugin.pluginName === before\n    )\n    if (beforeIndex > -1 && beforeIndex > pluginIndex) {\n      throw new Error(\n        `React Table: The ${pluginName} plugin hook must be placed after the ${before} plugin hook!`\n      )\n    }\n  })\n\n  afters.forEach(after => {\n    const afterIndex = plugins.findIndex(plugin => plugin.pluginName === after)\n    if (afterIndex > -1 && afterIndex < pluginIndex) {\n      throw new Error(\n        `React Table: The ${pluginName} plugin hook must be placed before the ${after} plugin hook!`\n      )\n    }\n  })\n}\n\nexport function expandRows(\n  rows,\n  { manualExpandedKey, expanded, expandSubRows = true }\n) {\n  const expandedRows = []\n\n  const handleRow = row => {\n    const key = row.path.join('.')\n\n    row.isExpanded =\n      (row.original && row.original[manualExpandedKey]) ||\n      expanded.includes(key)\n\n    row.canExpand = row.subRows && !!row.subRows.length\n\n    expandedRows.push(row)\n\n    if (expandSubRows && row.subRows && row.subRows.length && row.isExpanded) {\n      row.subRows.forEach(handleRow)\n    }\n  }\n\n  rows.forEach(handleRow)\n\n  return expandedRows\n}\n\n//\n\nfunction makePathArray(obj) {\n  return (\n    flattenDeep(obj)\n      // remove all periods in parts\n      .map(d => String(d).replace('.', '_'))\n      // join parts using period\n      .join('.')\n      // replace brackets with periods\n      .replace(/\\[/g, '.')\n      .replace(/\\]/g, '')\n      // split it back out on periods\n      .split('.')\n  )\n}\n\nfunction flattenDeep(arr, newArr = []) {\n  if (!Array.isArray(arr)) {\n    newArr.push(arr)\n  } else {\n    for (let i = 0; i < arr.length; i += 1) {\n      flattenDeep(arr[i], newArr)\n    }\n  }\n  return newArr\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\n//\nimport {\n  applyHooks,\n  applyPropHooks,\n  mergeProps,\n  flexRender,\n  decorateColumnTree,\n  makeHeaderGroups,\n  flattenBy,\n  determineHeaderVisibility,\n} from '../utils'\n\nconst propTypes = {\n  // General\n  data: PropTypes.array.isRequired,\n  columns: PropTypes.arrayOf(PropTypes.object).isRequired,\n  defaultColumn: PropTypes.object,\n  getSubRows: PropTypes.func,\n  getRowID: PropTypes.func,\n  debug: PropTypes.bool,\n}\n\nconst renderErr =\n  'You must specify a valid render component. This could be \"column.Cell\", \"column.Header\", \"column.Filter\", \"column.Aggregated\" or any other custom renderer component.'\n\nexport const defaultState = {}\n\nconst defaultInitialState = {}\nconst defaultColumnInstance = {}\nconst defaultReducer = (old, newState) => newState\nconst defaultGetSubRows = (row, index) => row.subRows || []\nconst defaultGetRowID = (row, index) => index\n\nexport const useTable = (props, ...plugins) => {\n  // Validate props\n  PropTypes.checkPropTypes(propTypes, props, 'property', 'useTable')\n\n  // Destructure props\n  let {\n    data,\n    columns: userColumns,\n    initialState = defaultInitialState,\n    state: userState,\n    defaultColumn = defaultColumnInstance,\n    getSubRows = defaultGetSubRows,\n    getRowID = defaultGetRowID,\n    reducer = defaultReducer,\n    debug,\n  } = props\n\n  debug = process.env.NODE_ENV === 'production' ? false : debug\n\n  // But use the users table state if provided\n  let [originalState, originalSetState] = React.useState({\n    ...defaultState,\n    ...initialState,\n  })\n\n  const state = React.useMemo(() => {\n    if (userState) {\n      const newState = {\n        ...originalState,\n      }\n      Object.keys(userState).forEach(key => {\n        newState[key] = userState[key]\n      })\n      return newState\n    }\n    return originalState\n  }, [originalState, userState])\n\n  const setState = React.useCallback(\n    (updater, type) => {\n      return originalSetState(old => {\n        const newState = typeof updater === 'function' ? updater(old) : updater\n        return reducer(old, newState, type)\n      })\n    },\n    [reducer]\n  )\n\n  // The table instance ref\n  let instanceRef = React.useRef({})\n\n  Object.assign(instanceRef.current, {\n    ...props,\n    data, // The raw data\n    state,\n    setState, // The resolved table state\n    plugins, // All resolved plugins\n    hooks: {\n      columnsBeforeHeaderGroups: [],\n      columnsBeforeHeaderGroupsDeps: [],\n      useBeforeDimensions: [],\n      useMain: [],\n      useRows: [],\n      prepareRow: [],\n      getTableProps: [],\n      getTableBodyProps: [],\n      getRowProps: [],\n      getHeaderGroupProps: [],\n      getHeaderProps: [],\n      getCellProps: [],\n    },\n  })\n\n  // Allow plugins to register hooks\n  if (process.env.NODE_ENV === 'development' && debug) console.time('plugins')\n\n  plugins.filter(Boolean).forEach(plugin => {\n    plugin(instanceRef.current.hooks)\n  })\n\n  if (process.env.NODE_ENV === 'development' && debug)\n    console.timeEnd('plugins')\n\n  // Decorate All the columns\n  let columns = React.useMemo(\n    () => decorateColumnTree(userColumns, defaultColumn),\n    [defaultColumn, userColumns]\n  )\n\n  // Get the flat list of all columns andllow hooks to decorate\n  // those columns (and trigger this memoization via deps)\n  let flatColumns = React.useMemo(() => {\n    if (process.env.NODE_ENV === 'development' && debug)\n      console.time('hooks.columnsBeforeHeaderGroups')\n\n    let newColumns = applyHooks(\n      instanceRef.current.hooks.columnsBeforeHeaderGroups,\n      flattenBy(columns, 'columns'),\n      instanceRef.current\n    )\n\n    if (process.env.NODE_ENV === 'development' && debug)\n      console.timeEnd('hooks.columnsBeforeHeaderGroups')\n    return newColumns\n  }, [\n    columns,\n    debug,\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    ...applyHooks(\n      instanceRef.current.hooks.columnsBeforeHeaderGroupsDeps,\n      [],\n      instanceRef.current\n    ),\n  ])\n\n  // Make the headerGroups\n  const headerGroups = React.useMemo(\n    () => makeHeaderGroups(flatColumns, defaultColumn),\n    [defaultColumn, flatColumns]\n  )\n\n  const headers = React.useMemo(() => headerGroups[0].headers, [headerGroups])\n\n  Object.assign(instanceRef.current, {\n    columns,\n    flatColumns,\n    headerGroups,\n    headers,\n  })\n\n  // Access the row model\n  const [rows, flatRows] = React.useMemo(() => {\n    if (process.env.NODE_ENV === 'development' && debug)\n      console.time('getAccessedRows')\n\n    let flatRows = []\n\n    // Access the row's data\n    const accessRow = (originalRow, i, depth = 0, parentPath = []) => {\n      // Keep the original reference around\n      const original = originalRow\n\n      const rowID = getRowID(originalRow, i)\n\n      // Make the new path for the row\n      const path = [...parentPath, rowID]\n\n      const row = {\n        original,\n        index: i,\n        path, // used to create a key for each row even if not nested\n        depth,\n        cells: [{}], // This is a dummy cell\n      }\n\n      flatRows.push(row)\n\n      // Process any subRows\n      let subRows = getSubRows(originalRow, i)\n\n      if (subRows) {\n        row.subRows = subRows.map((d, i) => accessRow(d, i, depth + 1, path))\n      }\n\n      // Override common array functions (and the dummy cell's getCellProps function)\n      // to show an error if it is accessed without calling prepareRow\n      const unpreparedAccessWarning = () => {\n        throw new Error(\n          'React-Table: You have not called prepareRow(row) one or more rows you are attempting to render.'\n        )\n      }\n      row.cells.map = unpreparedAccessWarning\n      row.cells.filter = unpreparedAccessWarning\n      row.cells.forEach = unpreparedAccessWarning\n      row.cells[0].getCellProps = unpreparedAccessWarning\n\n      // Create the cells and values\n      row.values = {}\n      flatColumns.forEach(column => {\n        row.values[column.id] = column.accessor\n          ? column.accessor(originalRow, i, { subRows, depth, data })\n          : undefined\n      })\n\n      return row\n    }\n\n    // Use the resolved data\n    const accessedData = data.map((d, i) => accessRow(d, i))\n    if (process.env.NODE_ENV === 'development' && debug)\n      console.timeEnd('getAccessedRows')\n    return [accessedData, flatRows]\n  }, [debug, data, getRowID, getSubRows, flatColumns])\n\n  instanceRef.current.rows = rows\n  instanceRef.current.flatRows = flatRows\n\n  // Determine column visibility\n  determineHeaderVisibility(instanceRef.current)\n\n  // Provide a flat header list for utilities\n  instanceRef.current.flatHeaders = headerGroups.reduce(\n    (all, headerGroup) => [...all, ...headerGroup.headers],\n    []\n  )\n\n  if (process.env.NODE_ENV === 'development' && debug)\n    console.time('hooks.useBeforeDimensions')\n  instanceRef.current = applyHooks(\n    instanceRef.current.hooks.useBeforeDimensions,\n    instanceRef.current\n  )\n  if (process.env.NODE_ENV === 'development' && debug)\n    console.timeEnd('hooks.useBeforeDimensions')\n\n  calculateDimensions(instanceRef.current)\n\n  if (process.env.NODE_ENV === 'development' && debug)\n    console.time('hooks.useMain')\n  instanceRef.current = applyHooks(\n    instanceRef.current.hooks.useMain,\n    instanceRef.current\n  )\n  if (process.env.NODE_ENV === 'development' && debug)\n    console.timeEnd('hooks.useMain')\n\n  // Each materialized header needs to be assigned a render function and other\n  // prop getter properties here.\n  instanceRef.current.flatHeaders.forEach(column => {\n    // Give columns/headers rendering power\n    column.render = (type, userProps = {}) => {\n      const Comp = typeof type === 'string' ? column[type] : type\n\n      if (typeof Comp === 'undefined') {\n        throw new Error(renderErr)\n      }\n\n      return flexRender(Comp, {\n        ...instanceRef.current,\n        column,\n        ...userProps,\n      })\n    }\n\n    // Give columns/headers a default getHeaderProps\n    column.getHeaderProps = props =>\n      mergeProps(\n        {\n          key: ['header', column.id].join('_'),\n          colSpan: column.totalVisibleHeaderCount,\n        },\n        applyPropHooks(\n          instanceRef.current.hooks.getHeaderProps,\n          column,\n          instanceRef.current\n        ),\n        props\n      )\n  })\n\n  instanceRef.current.headerGroups.forEach((headerGroup, i) => {\n    // Filter out any headers and headerGroups that don't have visible columns\n    headerGroup.headers = headerGroup.headers.filter(header => {\n      const recurse = headers =>\n        headers.filter(header => {\n          if (header.headers) {\n            return recurse(header.headers)\n          }\n          return header.isVisible\n        }).length\n      if (header.headers) {\n        return recurse(header.headers)\n      }\n      return header.isVisible\n    })\n\n    // Give headerGroups getRowProps\n    if (headerGroup.headers.length) {\n      headerGroup.getHeaderGroupProps = (props = {}) =>\n        mergeProps(\n          {\n            key: [`header${i}`].join('_'),\n          },\n          applyPropHooks(\n            instanceRef.current.hooks.getHeaderGroupProps,\n            headerGroup,\n            instanceRef.current\n          ),\n          props\n        )\n\n      return true\n    }\n  })\n\n  // Run the rows (this could be a dangerous hook with a ton of data)\n  if (process.env.NODE_ENV === 'development' && debug)\n    console.time('hooks.useRows')\n  instanceRef.current.rows = applyHooks(\n    instanceRef.current.hooks.useRows,\n    instanceRef.current.rows,\n    instanceRef.current\n  )\n  if (process.env.NODE_ENV === 'development' && debug)\n    console.timeEnd('hooks.useRows')\n\n  // The prepareRow function is absolutely necessary and MUST be called on\n  // any rows the user wishes to be displayed.\n\n  instanceRef.current.prepareRow = React.useCallback(row => {\n    row.getRowProps = props =>\n      mergeProps(\n        { key: ['row', ...row.path].join('_') },\n        applyPropHooks(\n          instanceRef.current.hooks.getRowProps,\n          row,\n          instanceRef.current\n        ),\n        props\n      )\n\n    // Build the visible cells for each row\n    row.cells = instanceRef.current.flatColumns\n      .filter(d => d.isVisible)\n      .map(column => {\n        const cell = {\n          column,\n          row,\n          value: row.values[column.id],\n        }\n\n        // Give each cell a getCellProps base\n        cell.getCellProps = props => {\n          const columnPathStr = [...row.path, column.id].join('_')\n          return mergeProps(\n            {\n              key: ['cell', columnPathStr].join('_'),\n            },\n            applyPropHooks(\n              instanceRef.current.hooks.getCellProps,\n              cell,\n              instanceRef.current\n            ),\n            props\n          )\n        }\n\n        // Give each cell a renderer function (supports multiple renderers)\n        cell.render = (type, userProps = {}) => {\n          const Comp = typeof type === 'string' ? column[type] : type\n\n          if (typeof Comp === 'undefined') {\n            throw new Error(renderErr)\n          }\n\n          return flexRender(Comp, {\n            ...instanceRef.current,\n            column,\n            row,\n            cell,\n            ...userProps,\n          })\n        }\n\n        return cell\n      })\n\n    // need to apply any row specific hooks (useExpanded requires this)\n    applyHooks(instanceRef.current.hooks.prepareRow, row, instanceRef.current)\n  }, [])\n\n  instanceRef.current.getTableProps = userProps =>\n    mergeProps(\n      applyPropHooks(\n        instanceRef.current.hooks.getTableProps,\n        instanceRef.current\n      ),\n      userProps\n    )\n\n  instanceRef.current.getTableBodyProps = userProps =>\n    mergeProps(\n      applyPropHooks(\n        instanceRef.current.hooks.getTableBodyProps,\n        instanceRef.current\n      ),\n      userProps\n    )\n\n  return instanceRef.current\n}\n\nfunction calculateDimensions(instance) {\n  const { headers } = instance\n\n  instance.totalColumnsWidth = calculateHeaderWidths(headers)\n}\n\nfunction calculateHeaderWidths(headers, left = 0) {\n  let sumTotalWidth = 0\n\n  headers.forEach(header => {\n    let { headers: subHeaders } = header\n\n    header.totalLeft = left\n\n    if (subHeaders && subHeaders.length) {\n      header.totalWidth = calculateHeaderWidths(subHeaders, left)\n    } else {\n      header.totalWidth = Math.min(\n        Math.max(header.minWidth, header.width),\n        header.maxWidth\n      )\n    }\n\n    left += header.totalWidth\n    sumTotalWidth += header.totalWidth\n  })\n\n  return sumTotalWidth\n}\n","const actions = {}\nconst types = {}\n\nexport { actions, types }\n\nexport const addActions = (...acts) => {\n  acts.forEach(action => {\n    // Action values are formatted this way to discourage\n    // you (the dev) from interacting with them in any way\n    // other than importing `{ actions } from 'react-table'`\n    // and referencing an action via `actions[actionName]`\n    actions[action] = `React Table Action: ${action}`\n    types[actions[action]] = true\n  })\n}\n","import { useMemo } from 'react'\nimport PropTypes from 'prop-types'\n\nimport { mergeProps, applyPropHooks, expandRows } from '../utils'\nimport { addActions, actions } from '../actions'\nimport { defaultState } from '../hooks/useTable'\n\ndefaultState.expanded = []\n\naddActions('toggleExpanded', 'useExpanded')\n\nconst propTypes = {\n  manualExpandedKey: PropTypes.string,\n  paginateExpandedRows: PropTypes.bool,\n}\n\nexport const useExpanded = hooks => {\n  hooks.getExpandedToggleProps = []\n  hooks.useMain.push(useMain)\n}\n\nuseExpanded.pluginName = 'useExpanded'\n\nfunction useMain(instance) {\n  PropTypes.checkPropTypes(propTypes, instance, 'property', 'useExpanded')\n\n  const {\n    debug,\n    rows,\n    manualExpandedKey = 'expanded',\n    paginateExpandedRows = true,\n    expandSubRows = true,\n    hooks,\n    state: { expanded },\n    setState,\n  } = instance\n\n  const toggleExpandedByPath = (path, set) => {\n    const key = path.join('.')\n\n    return setState(old => {\n      const exists = old.expanded.includes(key)\n      const shouldExist = typeof set !== 'undefined' ? set : !exists\n      let newExpanded = new Set(old.expanded)\n\n      if (!exists && shouldExist) {\n        newExpanded.add(key)\n      } else if (exists && !shouldExist) {\n        newExpanded.delete(key)\n      } else {\n        return old\n      }\n\n      return {\n        ...old,\n        expanded: [...newExpanded.values()],\n      }\n    }, actions.toggleExpanded)\n  }\n\n  hooks.prepareRow.push(row => {\n    row.toggleExpanded = set => toggleExpandedByPath(row.path, set)\n    row.getExpandedToggleProps = props => {\n      return mergeProps(\n        {\n          onClick: e => {\n            e.persist()\n            row.toggleExpanded()\n          },\n          style: {\n            cursor: 'pointer',\n          },\n          title: 'Toggle Expanded',\n        },\n        applyPropHooks(instance.hooks.getExpandedToggleProps, row, instance),\n        props\n      )\n    }\n    return row\n  })\n\n  const expandedRows = useMemo(() => {\n    if (process.env.NODE_ENV === 'development' && debug)\n      console.info('getExpandedRows')\n\n    if (paginateExpandedRows) {\n      return expandRows(rows, { manualExpandedKey, expanded, expandSubRows })\n    }\n\n    return rows\n  }, [\n    debug,\n    paginateExpandedRows,\n    rows,\n    manualExpandedKey,\n    expanded,\n    expandSubRows,\n  ])\n\n  const expandedDepth = findExpandedDepth(expanded)\n\n  return {\n    ...instance,\n    toggleExpandedByPath,\n    expandedDepth,\n    rows: expandedRows,\n  }\n}\n\nfunction findExpandedDepth(expanded) {\n  let maxDepth = 0\n\n  expanded.forEach(key => {\n    const path = key.split('.')\n    maxDepth = Math.max(maxDepth, path.length)\n  })\n\n  return maxDepth\n}\n","export const text = (rows, id, filterValue) => {\n  rows = rows.filter(row => {\n    const rowValue = row.values[id]\n    return String(rowValue)\n      .toLowerCase()\n      .includes(String(filterValue).toLowerCase())\n  })\n  return rows\n}\n\ntext.autoRemove = val => !val\n\nexport const exactText = (rows, id, filterValue) => {\n  return rows.filter(row => {\n    const rowValue = row.values[id]\n    return rowValue !== undefined\n      ? String(rowValue).toLowerCase() === String(filterValue).toLowerCase()\n      : true\n  })\n}\n\nexactText.autoRemove = val => !val\n\nexport const exactTextCase = (rows, id, filterValue) => {\n  return rows.filter(row => {\n    const rowValue = row.values[id]\n    return rowValue !== undefined\n      ? String(rowValue) === String(filterValue)\n      : true\n  })\n}\n\nexactTextCase.autoRemove = val => !val\n\nexport const includes = (rows, id, filterValue) => {\n  return rows.filter(row => {\n    const rowValue = row.values[id]\n    return filterValue.includes(rowValue)\n  })\n}\n\nincludes.autoRemove = val => !val || !val.length\n\nexport const includesAll = (rows, id, filterValue) => {\n  return rows.filter(row => {\n    const rowValue = row.values[id]\n    return (\n      rowValue &&\n      rowValue.length &&\n      filterValue.every(val => rowValue.includes(val))\n    )\n  })\n}\n\nincludesAll.autoRemove = val => !val || !val.length\n\nexport const exact = (rows, id, filterValue) => {\n  return rows.filter(row => {\n    const rowValue = row.values[id]\n    return rowValue === filterValue\n  })\n}\n\nexact.autoRemove = val => typeof val === 'undefined'\n\nexport const equals = (rows, id, filterValue) => {\n  return rows.filter(row => {\n    const rowValue = row.values[id]\n    // eslint-disable-next-line eqeqeq\n    return rowValue == filterValue\n  })\n}\n\nequals.autoRemove = val => val == null\n\nexport const between = (rows, id, filterValue) => {\n  let [min, max] = filterValue || []\n\n  min = typeof min === 'number' ? min : -Infinity\n  max = typeof max === 'number' ? max : Infinity\n\n  if (min > max) {\n    const temp = min\n    min = max\n    max = temp\n  }\n\n  return rows.filter(row => {\n    const rowValue = row.values[id]\n    return rowValue >= min && rowValue <= max\n  })\n}\n\nbetween.autoRemove = val =>\n  !val || (typeof val[0] !== 'number' && typeof val[1] !== 'number')\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport { getFirstDefined, isFunction } from '../utils'\nimport * as filterTypes from '../filterTypes'\nimport { addActions, actions } from '../actions'\nimport { defaultState } from '../hooks/useTable'\n\ndefaultState.filters = {}\n\naddActions('setFilter', 'setAllFilters')\n\nconst propTypes = {\n  columns: PropTypes.arrayOf(\n    PropTypes.shape({\n      disableFilters: PropTypes.bool,\n      Filter: PropTypes.any,\n    })\n  ),\n\n  manualFilters: PropTypes.bool,\n}\n\nexport const useFilters = hooks => {\n  hooks.useMain.push(useMain)\n}\n\nuseFilters.pluginName = 'useFilters'\n\nfunction useMain(instance) {\n  PropTypes.checkPropTypes(propTypes, instance, 'property', 'useFilters')\n\n  const {\n    debug,\n    rows,\n    flatRows,\n    flatColumns,\n    filterTypes: userFilterTypes,\n    manualFilters,\n    disableFilters,\n    state: { filters },\n    setState,\n  } = instance\n\n  const preFilteredRows = rows\n  const preFilteredFlatRows = flatRows\n\n  const setFilter = (id, updater) => {\n    const column = flatColumns.find(d => d.id === id)\n\n    if (!column) {\n      throw new Error(`React-Table: Could not find a column with id: ${id}`)\n    }\n\n    const filterMethod = getFilterMethod(\n      column.filter,\n      userFilterTypes || {},\n      filterTypes\n    )\n\n    return setState(old => {\n      const newFilter =\n        typeof updater === 'function' ? updater(old.filters[id]) : updater\n\n      //\n      if (shouldAutoRemove(filterMethod.autoRemove, newFilter)) {\n        const { [id]: remove, ...newFilters } = old.filters\n        return {\n          ...old,\n          filters: newFilters,\n        }\n      }\n\n      return {\n        ...old,\n        filters: {\n          ...old.filters,\n          [id]: newFilter,\n        },\n      }\n    }, actions.setFilter)\n  }\n\n  const setAllFilters = updater => {\n    return setState(old => {\n      const newFilters = typeof updater === 'function' ? updater(old) : updater\n\n      // Filter out undefined values\n      Object.keys(newFilters).forEach(id => {\n        const newFilter = newFilters[id]\n        const column = flatColumns.find(d => d.id === id)\n        const filterMethod = getFilterMethod(\n          column.filter,\n          userFilterTypes || {},\n          filterTypes\n        )\n\n        if (shouldAutoRemove(filterMethod.autoRemove, newFilter)) {\n          delete newFilters[id]\n        }\n      })\n\n      return {\n        ...old,\n        filters: newFilters,\n      }\n    }, actions.setAllFilters)\n  }\n\n  flatColumns.forEach(column => {\n    const { id, accessor, disableFilters: columnDisableFilters } = column\n\n    // Determine if a column is filterable\n    column.canFilter = accessor\n      ? getFirstDefined(\n          columnDisableFilters === true ? false : undefined,\n          disableFilters === true ? false : undefined,\n          true\n        )\n      : false\n\n    // Provide the column a way of updating the filter value\n    column.setFilter = val => setFilter(column.id, val)\n\n    // Provide the current filter value to the column for\n    // convenience\n    column.filterValue = filters[id]\n  })\n\n  // TODO: Create a filter cache for incremental high speed multi-filtering\n  // This gets pretty complicated pretty fast, since you have to maintain a\n  // cache for each row group (top-level rows, and each row's recursive subrows)\n  // This would make multi-filtering a lot faster though. Too far?\n\n  const { filteredRows, filteredFlatRows } = React.useMemo(() => {\n    if (manualFilters || !Object.keys(filters).length) {\n      return {\n        filteredRows: rows,\n        filteredFlatRows: flatRows,\n      }\n    }\n\n    const filteredFlatRows = []\n\n    if (process.env.NODE_ENV === 'development' && debug)\n      console.info('getFilteredRows')\n\n    // Filters top level and nested rows\n    const filterRows = (rows, depth = 0) => {\n      let filteredRows = rows\n\n      filteredRows = Object.entries(filters).reduce(\n        (filteredSoFar, [columnID, filterValue]) => {\n          // Find the filters column\n          const column = flatColumns.find(d => d.id === columnID)\n\n          if (!column) {\n            return filteredSoFar\n          }\n\n          if (depth === 0) {\n            column.preFilteredRows = filteredSoFar\n          }\n\n          const filterMethod = getFilterMethod(\n            column.filter,\n            userFilterTypes || {},\n            filterTypes\n          )\n\n          if (!filterMethod) {\n            console.warn(\n              `Could not find a valid 'column.filter' for column with the ID: ${column.id}.`\n            )\n            return filteredSoFar\n          }\n\n          // Pass the rows, id, filterValue and column to the filterMethod\n          // to get the filtered rows back\n          column.filteredRows = filterMethod(\n            filteredSoFar,\n            columnID,\n            filterValue,\n            column\n          )\n\n          return column.filteredRows\n        },\n        rows\n      )\n\n      // Apply the filter to any subRows\n      // We technically could do this recursively in the above loop,\n      // but that would severely hinder the API for the user, since they\n      // would be required to do that recursion in some scenarios\n      filteredRows = filteredRows.map(row => {\n        filteredFlatRows.push(row)\n        if (!row.subRows) {\n          return row\n        }\n        return {\n          ...row,\n          subRows:\n            row.subRows && row.subRows.length > 0\n              ? filterRows(row.subRows, depth + 1)\n              : row.subRows,\n        }\n      })\n\n      return filteredRows\n    }\n\n    return {\n      filteredRows: filterRows(rows),\n      filteredFlatRows,\n    }\n  }, [\n    manualFilters,\n    filters,\n    debug,\n    rows,\n    flatRows,\n    flatColumns,\n    userFilterTypes,\n  ])\n\n  React.useMemo(() => {\n    // Now that each filtered column has it's partially filtered rows,\n    // lets assign the final filtered rows to all of the other columns\n    const nonFilteredColumns = flatColumns.filter(\n      column => !Object.keys(filters).includes(column.id)\n    )\n\n    // This essentially enables faceted filter options to be built easily\n    // using every column's preFilteredRows value\n    nonFilteredColumns.forEach(column => {\n      column.preFilteredRows = filteredRows\n      column.filteredRows = filteredRows\n    })\n  }, [filteredRows, filters, flatColumns])\n\n  return {\n    ...instance,\n    setFilter,\n    setAllFilters,\n    preFilteredRows,\n    preFilteredFlatRows,\n    rows: filteredRows,\n    flatRows: filteredFlatRows,\n  }\n}\n\nfunction shouldAutoRemove(autoRemove, value) {\n  return autoRemove ? autoRemove(value) : typeof value === 'undefined'\n}\n\nfunction getFilterMethod(filter, userFilterTypes, filterTypes) {\n  return (\n    isFunction(filter) ||\n    userFilterTypes[filter] ||\n    filterTypes[filter] ||\n    filterTypes.text\n  )\n}\n","export function sum(values, rows) {\n  return values.reduce((sum, next) => sum + next, 0)\n}\n\nexport function average(values, rows) {\n  return Math.round((sum(values, rows) / values.length) * 100) / 100\n}\n\nexport function median(values) {\n  let min = values[0] || ''\n  let max = values[0] || ''\n\n  values.forEach(value => {\n    min = Math.min(min, value)\n    max = Math.max(max, value)\n  })\n\n  return (min + max) / 2\n}\n\nexport function uniqueCount(values) {\n  return new Set(values).size\n}\n\nexport function count(values) {\n  return values.length\n}\n","import { useMemo } from 'react'\nimport PropTypes from 'prop-types'\n\nimport * as aggregations from '../aggregations'\nimport { addActions, actions } from '../actions'\nimport { defaultState } from '../hooks/useTable'\nimport {\n  mergeProps,\n  applyPropHooks,\n  defaultGroupByFn,\n  getFirstDefined,\n  ensurePluginOrder,\n} from '../utils'\n\ndefaultState.groupBy = []\n\naddActions('toggleGroupBy')\n\nconst propTypes = {\n  // General\n  columns: PropTypes.arrayOf(\n    PropTypes.shape({\n      aggregate: PropTypes.oneOfType([\n        PropTypes.func,\n        PropTypes.string,\n        PropTypes.arrayOf(\n          PropTypes.oneOfType([PropTypes.func, PropTypes.string])\n        ),\n      ]),\n      disableGrouping: PropTypes.bool,\n      Aggregated: PropTypes.any,\n    })\n  ),\n  groupByFn: PropTypes.func,\n  manualGrouping: PropTypes.bool,\n  disableGrouping: PropTypes.bool,\n  aggregations: PropTypes.object,\n}\n\nexport const useGroupBy = hooks => {\n  hooks.columnsBeforeHeaderGroups.push(columnsBeforeHeaderGroups)\n  hooks.columnsBeforeHeaderGroupsDeps.push((deps, instance) => {\n    deps.push(instance.state.groupBy)\n    return deps\n  })\n  hooks.useMain.push(useMain)\n}\n\nuseGroupBy.pluginName = 'useGroupBy'\n\nfunction columnsBeforeHeaderGroups(flatColumns, { state: { groupBy } }) {\n  // Sort grouped columns to the start of the column list\n  // before the headers are built\n\n  const groupByColumns = groupBy.map(g => flatColumns.find(col => col.id === g))\n  const nonGroupByColumns = flatColumns.filter(col => !groupBy.includes(col.id))\n\n  // If a groupByBoundary column is found, place the groupBy's after it\n  const groupByBoundaryColumnIndex =\n    flatColumns.findIndex(column => column.groupByBoundary) + 1\n\n  return [\n    ...nonGroupByColumns.slice(0, groupByBoundaryColumnIndex),\n    ...groupByColumns,\n    ...nonGroupByColumns.slice(groupByBoundaryColumnIndex),\n  ]\n}\n\nfunction useMain(instance) {\n  PropTypes.checkPropTypes(propTypes, instance, 'property', 'useGroupBy')\n\n  const {\n    debug,\n    rows,\n    flatColumns,\n    flatHeaders,\n    groupByFn = defaultGroupByFn,\n    manualGroupBy,\n    disableGrouping,\n    aggregations: userAggregations = {},\n    hooks,\n    plugins,\n    state: { groupBy },\n    setState,\n  } = instance\n\n  ensurePluginOrder(plugins, [], 'useGroupBy', ['useSortBy', 'useExpanded'])\n\n  flatColumns.forEach(column => {\n    const { id, accessor, disableGrouping: columnDisableGrouping } = column\n    column.isGrouped = groupBy.includes(id)\n    column.groupedIndex = groupBy.indexOf(id)\n\n    column.canGroupBy = accessor\n      ? getFirstDefined(\n          columnDisableGrouping,\n          disableGrouping === true ? false : undefined,\n          true\n        )\n      : false\n\n    if (column.canGroupBy) {\n      column.toggleGroupBy = () => toggleGroupBy(column.id)\n    }\n\n    column.Aggregated = column.Aggregated || column.Cell\n  })\n\n  const toggleGroupBy = (id, toggle) => {\n    return setState(old => {\n      const resolvedToggle =\n        typeof toggle !== 'undefined' ? toggle : !groupBy.includes(id)\n      if (resolvedToggle) {\n        return {\n          ...old,\n          groupBy: [...groupBy, id],\n        }\n      }\n      return {\n        ...old,\n        groupBy: groupBy.filter(d => d !== id),\n      }\n    }, actions.toggleGroupBy)\n  }\n\n  hooks.getGroupByToggleProps = []\n\n  flatHeaders.forEach(header => {\n    const { canGroupBy } = header\n    header.getGroupByToggleProps = props => {\n      return mergeProps(\n        {\n          onClick: canGroupBy\n            ? e => {\n                e.persist()\n                header.toggleGroupBy()\n              }\n            : undefined,\n          style: {\n            cursor: canGroupBy ? 'pointer' : undefined,\n          },\n          title: 'Toggle GroupBy',\n        },\n        applyPropHooks(instance.hooks.getGroupByToggleProps, header, instance),\n        props\n      )\n    }\n  })\n\n  hooks.prepareRow.push(row => {\n    row.cells.forEach(cell => {\n      // Grouped cells are in the groupBy and the pivot cell for the row\n      cell.isGrouped = cell.column.isGrouped && cell.column.id === row.groupByID\n      // Repeated cells are any columns in the groupBy that are not grouped\n      cell.isRepeatedValue = !cell.isGrouped && cell.column.isGrouped\n      // Aggregated cells are not grouped, not repeated, but still have subRows\n      cell.isAggregated =\n        !cell.isGrouped && !cell.isRepeatedValue && row.canExpand\n    })\n    return row\n  })\n\n  const groupedRows = useMemo(() => {\n    if (manualGroupBy || !groupBy.length) {\n      return rows\n    }\n\n    if (process.env.NODE_ENV === 'development' && debug)\n      console.info('getGroupedRows')\n    // Find the columns that can or are aggregating\n\n    // Uses each column to aggregate rows into a single value\n    const aggregateRowsToValues = (rows, isSourceRows) => {\n      const values = {}\n\n      flatColumns.forEach(column => {\n        // Don't aggregate columns that are in the groupBy\n        if (groupBy.includes(column.id)) {\n          values[column.id] = rows[0] ? rows[0].values[column.id] : null\n          return\n        }\n\n        const columnValues = rows.map(d => d.values[column.id])\n\n        let aggregator = column.aggregate\n\n        if (Array.isArray(aggregator)) {\n          if (aggregator.length !== 2) {\n            console.info({ column })\n            throw new Error(\n              `React Table: Complex aggregators must have 2 values, eg. aggregate: ['sum', 'count']. More info above...`\n            )\n          }\n          if (isSourceRows) {\n            aggregator = aggregator[1]\n          } else {\n            aggregator = aggregator[0]\n          }\n        }\n\n        let aggregateFn =\n          typeof aggregator === 'function'\n            ? aggregator\n            : userAggregations[aggregator] || aggregations[aggregator]\n\n        if (aggregateFn) {\n          values[column.id] = aggregateFn(columnValues, rows)\n        } else if (aggregator) {\n          console.info({ column })\n          throw new Error(\n            `React Table: Invalid aggregate option for column listed above`\n          )\n        } else {\n          values[column.id] = null\n        }\n      })\n      return values\n    }\n\n    // Recursively group the data\n    const groupRecursively = (rows, depth = 0, parentPath = []) => {\n      // This is the last level, just return the rows\n      if (depth >= groupBy.length) {\n        return rows\n      }\n\n      const columnID = groupBy[depth]\n\n      // Group the rows together for this level\n      let groupedRows = groupByFn(rows, columnID)\n\n      // Recurse to sub rows before aggregation\n      groupedRows = Object.entries(groupedRows).map(\n        ([groupByVal, subRows], index) => {\n          const path = [...parentPath, `${columnID}:${groupByVal}`]\n\n          subRows = groupRecursively(subRows, depth + 1, path)\n\n          const values = aggregateRowsToValues(\n            subRows,\n            depth + 1 >= groupBy.length\n          )\n\n          const row = {\n            isAggregated: true,\n            groupByID: columnID,\n            groupByVal,\n            values,\n            subRows,\n            depth,\n            index,\n            path,\n          }\n\n          return row\n        }\n      )\n\n      return groupedRows\n    }\n\n    // Assign the new data\n    return groupRecursively(rows)\n  }, [\n    manualGroupBy,\n    groupBy,\n    debug,\n    rows,\n    flatColumns,\n    userAggregations,\n    groupByFn,\n  ])\n\n  return {\n    ...instance,\n    toggleGroupBy,\n    rows: groupedRows,\n    preGroupedRows: rows,\n  }\n}\n","const reSplitAlphaNumeric = /([0-9]+)/gm\n\n// Mixed sorting is slow, but very inclusive of many edge cases.\n// It handles numbers, mixed alphanumeric combinations, and even\n// null, undefined, and Infinity\nexport const alphanumeric = (rowA, rowB, columnID) => {\n  let a = getRowValueByColumnID(rowA, columnID)\n  let b = getRowValueByColumnID(rowB, columnID)\n  // Force to strings (or \"\" for unsupported types)\n  a = toString(a)\n  b = toString(b)\n\n  // Split on number groups, but keep the delimiter\n  // Then remove falsey split values\n  a = a.split(reSplitAlphaNumeric).filter(Boolean)\n  b = b.split(reSplitAlphaNumeric).filter(Boolean)\n\n  // While\n  while (a.length && b.length) {\n    let aa = a.shift()\n    let bb = b.shift()\n\n    const an = parseInt(aa, 10)\n    const bn = parseInt(bb, 10)\n\n    const combo = [an, bn].sort()\n\n    // Both are string\n    if (isNaN(combo[0])) {\n      if (aa > bb) {\n        return 1\n      }\n      if (bb > aa) {\n        return -1\n      }\n      continue\n    }\n\n    // One is a string, one is a number\n    if (isNaN(combo[1])) {\n      return isNaN(an) ? -1 : 1\n    }\n\n    // Both are numbers\n    if (an > bn) {\n      return 1\n    }\n    if (bn > an) {\n      return -1\n    }\n  }\n\n  return a.length - b.length\n}\n\nexport function datetime(rowA, rowB, columnID) {\n  let a = getRowValueByColumnID(rowA, columnID)\n  let b = getRowValueByColumnID(rowB, columnID)\n\n  a = a.getTime()\n  b = b.getTime()\n\n  return compareBasic(a, b)\n}\n\nexport function basic(rowA, rowB, columnID) {\n  let a = getRowValueByColumnID(rowA, columnID)\n  let b = getRowValueByColumnID(rowB, columnID)\n\n  return compareBasic(a, b)\n}\n\n// Utils\n\nfunction compareBasic(a, b) {\n  return a === b ? 0 : a > b ? 1 : -1\n}\n\nfunction getRowValueByColumnID(row, columnID) {\n  return row.values[columnID]\n}\n\nfunction toString(a) {\n  if (typeof a === 'number') {\n    if (isNaN(a) || a === Infinity || a === -Infinity) {\n      return ''\n    }\n    return String(a)\n  }\n  if (typeof a === 'string') {\n    return a\n  }\n  return ''\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport { ensurePluginOrder, defaultColumn } from '../utils'\nimport { addActions, actions } from '../actions'\nimport { defaultState } from '../hooks/useTable'\nimport * as sortTypes from '../sortTypes'\nimport {\n  mergeProps,\n  applyPropHooks,\n  getFirstDefined,\n  defaultOrderByFn,\n  isFunction,\n} from '../utils'\n\ndefaultState.sortBy = []\ndefaultColumn.sortType = 'alphanumeric'\ndefaultColumn.sortDescFirst = false\n\naddActions('sortByChange')\n\nconst propTypes = {\n  // General\n  columns: PropTypes.arrayOf(\n    PropTypes.shape({\n      sortType: PropTypes.oneOfType([PropTypes.string, PropTypes.func]),\n      sortDescFirst: PropTypes.bool,\n      disableSorting: PropTypes.bool,\n    })\n  ),\n  orderByFn: PropTypes.func,\n  sortTypes: PropTypes.object,\n  manualSorting: PropTypes.bool,\n  disableSorting: PropTypes.bool,\n  disableMultiSort: PropTypes.bool,\n  isMultiSortEvent: PropTypes.func,\n  maxMultiSortColCount: PropTypes.number,\n  disableSortRemove: PropTypes.bool,\n  disableMultiRemove: PropTypes.bool,\n}\n\nexport const useSortBy = hooks => {\n  hooks.useMain.push(useMain)\n}\n\nuseSortBy.pluginName = 'useSortBy'\n\nfunction useMain(instance) {\n  PropTypes.checkPropTypes(propTypes, instance, 'property', 'useSortBy')\n\n  const {\n    debug,\n    rows,\n    flatColumns,\n    orderByFn = defaultOrderByFn,\n    sortTypes: userSortTypes,\n    manualSorting,\n    disableSorting,\n    disableSortRemove,\n    disableMultiRemove,\n    disableMultiSort,\n    isMultiSortEvent = e => e.shiftKey,\n    maxMultiSortColCount = Number.MAX_SAFE_INTEGER,\n    flatHeaders,\n    hooks,\n    state: { sortBy },\n    setState,\n    plugins,\n  } = instance\n\n  ensurePluginOrder(plugins, ['useFilters'], 'useSortBy', [])\n  // Add custom hooks\n  hooks.getSortByToggleProps = []\n\n  // Updates sorting based on a columnID, desc flag and multi flag\n  const toggleSortBy = (columnID, desc, multi) => {\n    return setState(old => {\n      const { sortBy } = old\n\n      // Find the column for this columnID\n      const column = flatColumns.find(d => d.id === columnID)\n      const { sortDescFirst } = column\n\n      // Find any existing sortBy for this column\n      const existingSortBy = sortBy.find(d => d.id === columnID)\n      const existingIndex = sortBy.findIndex(d => d.id === columnID)\n      const hasDescDefined = typeof desc !== 'undefined' && desc !== null\n\n      let newSortBy = []\n\n      // What should we do with this sort action?\n      let action\n\n      if (!disableMultiSort && multi) {\n        if (existingSortBy) {\n          action = 'toggle'\n        } else {\n          action = 'add'\n        }\n      } else {\n        // Normal mode\n        if (existingIndex !== sortBy.length - 1) {\n          action = 'replace'\n        } else if (existingSortBy) {\n          action = 'toggle'\n        } else {\n          action = 'replace'\n        }\n      }\n\n      // Handle toggle states that will remove the sortBy\n      if (\n        action === 'toggle' && // Must be toggling\n        !disableSortRemove && // If disableSortRemove, disable in general\n        !hasDescDefined && // Must not be setting desc\n        (multi ? !disableMultiRemove : true) && // If multi, don't allow if disableMultiRemove\n        ((existingSortBy && // Finally, detect if it should indeed be removed\n          (existingSortBy.desc && !sortDescFirst)) ||\n          (!existingSortBy.desc && sortDescFirst))\n      ) {\n        action = 'remove'\n      }\n\n      if (action === 'replace') {\n        newSortBy = [\n          {\n            id: columnID,\n            desc: hasDescDefined ? desc : sortDescFirst,\n          },\n        ]\n      } else if (action === 'add') {\n        newSortBy = [\n          ...sortBy,\n          {\n            id: columnID,\n            desc: hasDescDefined ? desc : sortDescFirst,\n          },\n        ]\n        // Take latest n columns\n        newSortBy.splice(0, newSortBy.length - maxMultiSortColCount)\n      } else if (action === 'toggle') {\n        // This flips (or sets) the\n        newSortBy = sortBy.map(d => {\n          if (d.id === columnID) {\n            return {\n              ...d,\n              desc: hasDescDefined ? desc : !existingSortBy.desc,\n            }\n          }\n          return d\n        })\n      } else if (action === 'remove') {\n        newSortBy = sortBy.filter(d => d.id !== columnID)\n      }\n\n      return {\n        ...old,\n        sortBy: newSortBy,\n      }\n    }, actions.sortByChange)\n  }\n\n  // Add the getSortByToggleProps method to columns and headers\n  flatHeaders.forEach(column => {\n    const { accessor, disableSorting: columnDisableSorting, id } = column\n\n    const canSort = accessor\n      ? getFirstDefined(\n          columnDisableSorting === true ? false : undefined,\n          disableSorting === true ? false : undefined,\n          true\n        )\n      : false\n\n    column.canSort = canSort\n\n    if (column.canSort) {\n      column.toggleSortBy = (desc, multi) =>\n        toggleSortBy(column.id, desc, multi)\n\n      column.clearSorting = () => {\n        return setState(old => {\n          const { sortBy } = old\n          const newSortBy = sortBy.filter(d => d.id !== column.id)\n          return {\n            ...old,\n            sortBy: newSortBy,\n          }\n        }, actions.sortByChange)\n      }\n    }\n\n    column.getSortByToggleProps = props => {\n      return mergeProps(\n        {\n          onClick: canSort\n            ? e => {\n                e.persist()\n                column.toggleSortBy(\n                  undefined,\n                  !instance.disableMultiSort && isMultiSortEvent(e)\n                )\n              }\n            : undefined,\n          style: {\n            cursor: canSort ? 'pointer' : undefined,\n          },\n          title: 'Toggle SortBy',\n        },\n        applyPropHooks(instance.hooks.getSortByToggleProps, column, instance),\n        props\n      )\n    }\n\n    const columnSort = sortBy.find(d => d.id === id)\n    column.isSorted = !!columnSort\n    column.sortedIndex = sortBy.findIndex(d => d.id === id)\n    column.isSortedDesc = column.isSorted ? columnSort.desc : undefined\n  })\n\n  const sortedRows = React.useMemo(() => {\n    if (manualSorting || !sortBy.length) {\n      return rows\n    }\n    if (process.env.NODE_ENV === 'development' && debug)\n      console.time('getSortedRows')\n\n    // Filter out sortBys that correspond to non existing columns\n    const availableSortBy = sortBy.filter(sort =>\n      flatColumns.find(col => col.id === sort.id)\n    )\n\n    const sortData = rows => {\n      // Use the orderByFn to compose multiple sortBy's together.\n      // This will also perform a stable sorting using the row index\n      // if needed.\n      const sortedData = orderByFn(\n        rows,\n        availableSortBy.map(sort => {\n          // Support custom sorting methods for each column\n          const column = flatColumns.find(d => d.id === sort.id)\n\n          if (!column) {\n            throw new Error(\n              `React-Table: Could not find a column with id: ${sort.id} while sorting`\n            )\n          }\n\n          const { sortType } = column\n\n          // Look up sortBy functions in this order:\n          // column function\n          // column string lookup on user sortType\n          // column string lookup on built-in sortType\n          // default function\n          // default string lookup on user sortType\n          // default string lookup on built-in sortType\n          const sortMethod =\n            isFunction(sortType) ||\n            (userSortTypes || {})[sortType] ||\n            sortTypes[sortType]\n\n          if (!sortMethod) {\n            throw new Error(\n              `React-Table: Could not find a valid sortType of '${sortType}' for column '${sort.id}'.`\n            )\n          }\n\n          // Return the correct sortFn.\n          // This function should always return in ascending order\n          return (a, b) => sortMethod(a, b, sort.id)\n        }),\n        // Map the directions\n        availableSortBy.map(sort => {\n          // Detect and use the sortInverted option\n          const column = flatColumns.find(d => d.id === sort.id)\n\n          if (column && column.sortInverted) {\n            return sort.desc\n          }\n\n          return !sort.desc\n        })\n      )\n\n      // If there are sub-rows, sort them\n      sortedData.forEach(row => {\n        if (!row.subRows || row.subRows.length <= 1) {\n          return\n        }\n        row.subRows = sortData(row.subRows)\n      })\n\n      return sortedData\n    }\n\n    if (process.env.NODE_ENV === 'development' && debug)\n      console.timeEnd('getSortedRows')\n\n    return sortData(rows)\n  }, [\n    manualSorting,\n    sortBy,\n    debug,\n    rows,\n    flatColumns,\n    orderByFn,\n    userSortTypes,\n  ])\n\n  return {\n    ...instance,\n    toggleSortBy,\n    rows: sortedRows,\n    preSortedRows: rows,\n  }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\n//\nimport { addActions, actions } from '../actions'\nimport { defaultState } from '../hooks/useTable'\nimport { ensurePluginOrder, safeUseLayoutEffect, expandRows } from '../utils'\n\ndefaultState.pageSize = 10\ndefaultState.pageIndex = 0\n\naddActions('pageChange', 'pageSizeChange')\n\nconst propTypes = {\n  // General\n  manualPagination: PropTypes.bool,\n  paginateExpandedRows: PropTypes.bool,\n}\n\nexport const usePagination = hooks => {\n  hooks.useMain.push(useMain)\n}\n\nusePagination.pluginName = 'usePagination'\n\nfunction useMain(instance) {\n  PropTypes.checkPropTypes(propTypes, instance, 'property', 'usePagination')\n\n  const {\n    data,\n    rows,\n    manualPagination,\n    disablePageResetOnDataChange,\n    manualExpandedKey = 'expanded',\n    debug,\n    plugins,\n    pageCount: userPageCount,\n    paginateExpandedRows = true,\n    expandSubRows = true,\n    state: { pageSize, pageIndex, filters, groupBy, sortBy, expanded },\n    setState,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useFilters', 'useGroupBy', 'useSortBy', 'useExpanded'],\n    'usePagination',\n    []\n  )\n\n  const rowDep = manualPagination ? null : data\n\n  const isPageIndexMountedRef = React.useRef()\n\n  // Bypass any effects from firing when this changes\n  const disablePageResetOnDataChangeRef = React.useRef()\n  disablePageResetOnDataChangeRef.current = disablePageResetOnDataChange\n\n  safeUseLayoutEffect(() => {\n    if (\n      isPageIndexMountedRef.current &&\n      !disablePageResetOnDataChangeRef.current\n    ) {\n      setState(\n        old => ({\n          ...old,\n          pageIndex: 0,\n        }),\n        actions.pageChange\n      )\n    }\n    isPageIndexMountedRef.current = true\n  }, [setState, rowDep, filters, groupBy, sortBy])\n\n  const pageCount = manualPagination\n    ? userPageCount\n    : Math.ceil(rows.length / pageSize)\n\n  const pageOptions = React.useMemo(\n    () => (pageCount > 0 ? [...new Array(pageCount)].map((d, i) => i) : []),\n    [pageCount]\n  )\n\n  const page = React.useMemo(() => {\n    let page\n\n    if (manualPagination) {\n      page = rows\n    } else {\n      if (process.env.NODE_ENV === 'development' && debug)\n        console.info('getPage')\n\n      const pageStart = pageSize * pageIndex\n      const pageEnd = pageStart + pageSize\n\n      page = rows.slice(pageStart, pageEnd)\n    }\n\n    if (paginateExpandedRows) {\n      return page\n    }\n\n    return expandRows(page, { manualExpandedKey, expanded, expandSubRows })\n  }, [\n    debug,\n    expandSubRows,\n    expanded,\n    manualExpandedKey,\n    manualPagination,\n    pageIndex,\n    pageSize,\n    paginateExpandedRows,\n    rows,\n  ])\n\n  const canPreviousPage = pageIndex > 0\n  const canNextPage = pageCount === -1 || pageIndex < pageCount - 1\n\n  const gotoPage = React.useCallback(\n    updater => {\n      if (process.env.NODE_ENV === 'development' && debug)\n        console.info('gotoPage')\n      return setState(old => {\n        const newPageIndex =\n          typeof updater === 'function' ? updater(old.pageIndex) : updater\n\n        if (newPageIndex < 0 || newPageIndex > pageCount - 1) {\n          return old\n        }\n        return {\n          ...old,\n          pageIndex: newPageIndex,\n        }\n      }, actions.pageChange)\n    },\n    [debug, pageCount, setState]\n  )\n\n  const previousPage = React.useCallback(() => {\n    return gotoPage(old => old - 1)\n  }, [gotoPage])\n\n  const nextPage = React.useCallback(() => {\n    return gotoPage(old => old + 1)\n  }, [gotoPage])\n\n  const setPageSize = React.useCallback(\n    pageSize => {\n      setState(old => {\n        const topRowIndex = old.pageSize * old.pageIndex\n        const pageIndex = Math.floor(topRowIndex / pageSize)\n        return {\n          ...old,\n          pageIndex,\n          pageSize,\n        }\n      }, actions.pageSizeChange)\n    },\n    [setState]\n  )\n\n  return {\n    ...instance,\n    pageOptions,\n    pageCount,\n    page,\n    canPreviousPage,\n    canNextPage,\n    gotoPage,\n    previousPage,\n    nextPage,\n    setPageSize,\n    pageIndex,\n    pageSize,\n  }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport {\n  mergeProps,\n  applyPropHooks,\n  ensurePluginOrder,\n  safeUseLayoutEffect,\n} from '../utils'\nimport { addActions, actions } from '../actions'\nimport { defaultState } from '../hooks/useTable'\n\ndefaultState.selectedRowPaths = []\n\naddActions('toggleRowSelected', 'toggleRowSelectedAll')\n\nconst propTypes = {\n  manualRowSelectedKey: PropTypes.string,\n}\n\nexport const useRowSelect = hooks => {\n  hooks.getToggleRowSelectedProps = []\n  hooks.getToggleAllRowsSelectedProps = []\n  hooks.useRows.push(useRows)\n  hooks.useMain.push(useMain)\n}\n\nuseRowSelect.pluginName = 'useRowSelect'\n\nfunction useRows(rows, instance) {\n  PropTypes.checkPropTypes(propTypes, instance, 'property', 'useRowSelect')\n\n  const {\n    state: { selectedRowPaths },\n  } = instance\n\n  instance.selectedFlatRows = React.useMemo(() => {\n    const selectedFlatRows = []\n    rows.forEach(row => {\n      if (row.isAggregated) {\n        const subRowPaths = row.subRows.map(row => row.path)\n        row.isSelected = subRowPaths.every(path =>\n          selectedRowPaths.includes(path.join('.'))\n        )\n      } else {\n        row.isSelected = selectedRowPaths.includes(row.path.join('.'))\n      }\n      if (row.isSelected) {\n        selectedFlatRows.push(row)\n      }\n    })\n\n    return selectedFlatRows\n  }, [rows, selectedRowPaths])\n\n  return rows\n}\n\nfunction useMain(instance) {\n  PropTypes.checkPropTypes(propTypes, instance, 'property', 'useRowSelect')\n\n  const {\n    hooks,\n    manualRowSelectedKey = 'isSelected',\n    disableSelectedRowsResetOnDataChange,\n    plugins,\n    flatRows,\n    data,\n    state: { selectedRowPaths },\n    setState,\n  } = instance\n\n  ensurePluginOrder(\n    plugins,\n    ['useFilters', 'useGroupBy', 'useSortBy'],\n    'useRowSelect',\n    []\n  )\n\n  const flatRowPaths = flatRows.map(d => d.path.join('.'))\n\n  let isAllRowsSelected = !!flatRowPaths.length && !!selectedRowPaths.length\n\n  if (isAllRowsSelected) {\n    if (flatRowPaths.some(d => !selectedRowPaths.includes(d))) {\n      isAllRowsSelected = false\n    }\n  }\n\n  const isRowSelectedMountedRef = React.useRef()\n\n  // Bypass any effects from firing when this changes\n  const disableSelectedRowsResetOnDataChangeRef = React.useRef()\n  disableSelectedRowsResetOnDataChangeRef.current = disableSelectedRowsResetOnDataChange\n\n  safeUseLayoutEffect(() => {\n    if (\n      isRowSelectedMountedRef.current &&\n      !disableSelectedRowsResetOnDataChangeRef.current\n    ) {\n      setState(\n        old => ({\n          ...old,\n          selectedRowPaths: [],\n        }),\n        actions.pageChange\n      )\n    }\n    isRowSelectedMountedRef.current = true\n  }, [setState, data])\n\n  const toggleRowSelectedAll = set => {\n    setState(old => {\n      const selectAll = typeof set !== 'undefined' ? set : !isAllRowsSelected\n      return {\n        ...old,\n        selectedRowPaths: selectAll ? flatRowPaths : [],\n      }\n    }, actions.toggleRowSelectedAll)\n  }\n\n  const updateParentRow = (selectedRowPaths, path) => {\n    const parentPath = path.slice(0, path.length - 1)\n    const parentKey = parentPath.join('.')\n    const selected =\n      flatRowPaths.filter(rowPath => {\n        const path = rowPath\n        return (\n          path !== parentKey &&\n          path.startsWith(parentKey) &&\n          !selectedRowPaths.has(path)\n        )\n      }).length === 0\n    if (selected) {\n      selectedRowPaths.add(parentKey)\n    } else {\n      selectedRowPaths.delete(parentKey)\n    }\n    if (parentPath.length > 1) updateParentRow(selectedRowPaths, parentPath)\n  }\n\n  const toggleRowSelected = (path, set) => {\n    const key = path.join('.')\n    const childRowPrefixKey = [key, '.'].join('')\n\n    return setState(old => {\n      // Join the paths of deep rows\n      // to make a key, then manage all of the keys\n      // in a flat object\n      const exists = old.selectedRowPaths.includes(key)\n      const shouldExist = typeof set !== 'undefined' ? set : !exists\n      let newSelectedRows = new Set(old.selectedRowPaths)\n\n      if (!exists && shouldExist) {\n        flatRowPaths.forEach(rowPath => {\n          if (rowPath === key || rowPath.startsWith(childRowPrefixKey)) {\n            newSelectedRows.add(rowPath)\n          }\n        })\n      } else if (exists && !shouldExist) {\n        flatRowPaths.forEach(rowPath => {\n          if (rowPath === key || rowPath.startsWith(childRowPrefixKey)) {\n            newSelectedRows.delete(rowPath)\n          }\n        })\n      } else {\n        return old\n      }\n\n      // If the row is a subRow update\n      // its parent row to reflect changes\n      if (path.length > 1) updateParentRow(newSelectedRows, path)\n\n      return {\n        ...old,\n        selectedRowPaths: [...newSelectedRows.values()],\n      }\n    }, actions.toggleRowSelected)\n  }\n\n  const getToggleAllRowsSelectedProps = props => {\n    return mergeProps(\n      {\n        onChange: e => {\n          toggleRowSelectedAll(e.target.checked)\n        },\n        style: {\n          cursor: 'pointer',\n        },\n        checked: isAllRowsSelected,\n        title: 'Toggle All Rows Selected',\n      },\n      applyPropHooks(instance.hooks.getToggleAllRowsSelectedProps, instance),\n      props\n    )\n  }\n\n  hooks.prepareRow.push(row => {\n    // Aggregate rows have entirely different select logic\n    if (row.isAggregated) {\n      const subRowPaths = row.subRows.map(row => row.path)\n      row.toggleRowSelected = set => {\n        set = typeof set !== 'undefined' ? set : !row.isSelected\n        subRowPaths.forEach(path => {\n          toggleRowSelected(path, set)\n        })\n      }\n      row.getToggleRowSelectedProps = props => {\n        let checked = false\n\n        if (row.original && row.original[manualRowSelectedKey]) {\n          checked = true\n        } else {\n          checked = row.isSelected\n        }\n\n        return mergeProps(\n          {\n            onChange: e => {\n              row.toggleRowSelected(e.target.checked)\n            },\n            style: {\n              cursor: 'pointer',\n            },\n            checked,\n            title: 'Toggle Row Selected',\n          },\n          applyPropHooks(\n            instance.hooks.getToggleRowSelectedProps,\n            row,\n            instance\n          ),\n          props\n        )\n      }\n    } else {\n      row.toggleRowSelected = set => toggleRowSelected(row.path, set)\n      row.getToggleRowSelectedProps = props => {\n        let checked = false\n\n        if (row.original && row.original[manualRowSelectedKey]) {\n          checked = true\n        } else {\n          checked = row.isSelected\n        }\n\n        return mergeProps(\n          {\n            onChange: e => {\n              row.toggleRowSelected(e.target.checked)\n            },\n            style: {\n              cursor: 'pointer',\n            },\n            checked,\n            title: 'Toggle Row Selected',\n          },\n          applyPropHooks(\n            instance.hooks.getToggleRowSelectedProps,\n            row,\n            instance\n          ),\n          props\n        )\n      }\n    }\n\n    return row\n  })\n\n  return {\n    ...instance,\n    toggleRowSelected,\n    toggleRowSelectedAll,\n    getToggleAllRowsSelectedProps,\n    isAllRowsSelected,\n  }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport { addActions, actions } from '../actions'\nimport { defaultState } from '../hooks/useTable'\n\ndefaultState.rowState = {}\n\naddActions('setRowState', 'setCellState')\n\nconst propTypes = {\n  initialRowStateAccessor: PropTypes.func,\n}\n\nexport const useRowState = hooks => {\n  hooks.useMain.push(useMain)\n}\n\nuseRowState.pluginName = 'useRowState'\n\nfunction useMain(instance) {\n  PropTypes.checkPropTypes(propTypes, instance, 'property', 'useRowState')\n\n  const {\n    hooks,\n    rows,\n    initialRowStateAccessor,\n    state: { rowState },\n    setState,\n  } = instance\n\n  const setRowState = React.useCallback(\n    (path, updater, action = actions.setRowState) => {\n      const pathKey = path.join('.')\n      return setState(old => {\n        return {\n          ...old,\n          rowState: {\n            ...old.rowState,\n            [pathKey]:\n              typeof updater === 'function'\n                ? updater(old.rowState[pathKey])\n                : updater,\n          },\n        }\n      }, action)\n    },\n    [setState]\n  )\n\n  const setCellState = React.useCallback(\n    (rowPath, columnID, updater) => {\n      return setRowState(\n        rowPath,\n        old => {\n          return {\n            ...old,\n            cellState: {\n              ...old.cellState,\n              [columnID]:\n                typeof updater === 'function'\n                  ? updater(old.cellState[columnID])\n                  : updater,\n            },\n          }\n        },\n        actions.setCellState\n      )\n    },\n    [setRowState]\n  )\n\n  const rowsMountedRef = React.useRef()\n\n  // When data changes, reset row and cell state\n  React.useEffect(() => {\n    if (rowsMountedRef.current) {\n      setState(old => {\n        return {\n          ...old,\n          rowState: {},\n        }\n      }, actions.setRowState)\n    }\n\n    rowsMountedRef.current = true\n  }, [rows, setState])\n\n  hooks.prepareRow.push(row => {\n    const pathKey = row.path.join('.')\n\n    if (row.original) {\n      row.state =\n        (typeof rowState[pathKey] !== 'undefined'\n          ? rowState[pathKey]\n          : initialRowStateAccessor && initialRowStateAccessor(row)) || {}\n\n      row.setState = updater => {\n        return setRowState(row.path, updater)\n      }\n\n      row.cells.forEach(cell => {\n        cell.state = row.state.cellState || {}\n\n        cell.setState = updater => {\n          return setCellState(row.path, cell.column.id, updater)\n        }\n      })\n    }\n\n    return row\n  })\n\n  return {\n    ...instance,\n    setRowState,\n    setCellState,\n  }\n}\n","import React from 'react'\nimport PropTypes from 'prop-types'\n\nimport { addActions, actions } from '../actions'\nimport { defaultState } from '../hooks/useTable'\n\ndefaultState.columnOrder = []\n\naddActions('setColumnOrder')\n\nconst propTypes = {\n  initialRowStateAccessor: PropTypes.func,\n}\n\nexport const useColumnOrder = hooks => {\n  hooks.columnsBeforeHeaderGroupsDeps.push((deps, instance) => {\n    return [...deps, instance.state.columnOrder]\n  })\n  hooks.columnsBeforeHeaderGroups.push(columnsBeforeHeaderGroups)\n  hooks.useMain.push(useMain)\n}\n\nuseColumnOrder.pluginName = 'useColumnOrder'\n\nfunction columnsBeforeHeaderGroups(columns, instance) {\n  const {\n    state: { columnOrder },\n  } = instance\n\n  // If there is no order, return the normal columns\n  if (!columnOrder || !columnOrder.length) {\n    return columns\n  }\n\n  const columnOrderCopy = [...columnOrder]\n\n  // If there is an order, make a copy of the columns\n  const columnsCopy = [...columns]\n\n  // And make a new ordered array of the columns\n  const columnsInOrder = []\n\n  // Loop over the columns and place them in order into the new array\n  while (columnsCopy.length && columnOrderCopy.length) {\n    const targetColumnID = columnOrderCopy.shift()\n    const foundIndex = columnsCopy.findIndex(d => d.id === targetColumnID)\n    if (foundIndex > -1) {\n      columnsInOrder.push(columnsCopy.splice(foundIndex, 1)[0])\n    }\n  }\n\n  // If there are any columns left, add them to the end\n  return [...columnsInOrder, ...columnsCopy]\n}\n\nfunction useMain(instance) {\n  PropTypes.checkPropTypes(propTypes, instance, 'property', 'useColumnOrder')\n\n  const { setState } = instance\n\n  const setColumnOrder = React.useCallback(\n    updater => {\n      return setState(old => {\n        return {\n          ...old,\n          columnOrder:\n            typeof updater === 'function' ? updater(old.columnOrder) : updater,\n        }\n      }, actions.setColumnOrder)\n    },\n    [setState]\n  )\n\n  return {\n    ...instance,\n    setColumnOrder,\n  }\n}\n","import PropTypes from 'prop-types'\n\n//\n\nimport { defaultState } from '../hooks/useTable'\nimport { defaultColumn, getFirstDefined } from '../utils'\nimport { mergeProps, applyPropHooks } from '../utils'\n\ndefaultState.columnResizing = {\n  columnWidths: {},\n}\n\ndefaultColumn.canResize = true\n\nconst propTypes = {}\n\nexport const useResizeColumns = hooks => {\n  hooks.useBeforeDimensions.push(useBeforeDimensions)\n}\n\nuseResizeColumns.pluginName = 'useResizeColumns'\n\nconst useBeforeDimensions = instance => {\n  PropTypes.checkPropTypes(propTypes, instance, 'property', 'useResizeColumns')\n\n  instance.hooks.getResizerProps = []\n\n  const {\n    flatHeaders,\n    disableResizing,\n    hooks: { getHeaderProps },\n    state: { columnResizing },\n    setState,\n  } = instance\n\n  getHeaderProps.push(() => {\n    return {\n      style: {\n        position: 'relative',\n      },\n    }\n  })\n\n  const onMouseDown = (e, header) => {\n    const headersToResize = getLeafHeaders(header)\n    const startWidths = headersToResize.map(header => header.totalWidth)\n    const startX = e.clientX\n\n    const onMouseMove = e => {\n      const currentX = e.clientX\n      const deltaX = currentX - startX\n\n      const percentageDeltaX = deltaX / headersToResize.length\n\n      const newColumnWidths = {}\n      headersToResize.forEach((header, index) => {\n        newColumnWidths[header.id] = Math.max(\n          startWidths[index] + percentageDeltaX,\n          0\n        )\n      })\n\n      setState(old => ({\n        ...old,\n        columnResizing: {\n          ...old.columnResizing,\n          columnWidths: {\n            ...old.columnResizing.columnWidths,\n            ...newColumnWidths,\n          },\n        },\n      }))\n    }\n\n    const onMouseUp = e => {\n      document.removeEventListener('mousemove', onMouseMove)\n      document.removeEventListener('mouseup', onMouseUp)\n\n      setState(old => ({\n        ...old,\n        columnResizing: {\n          ...old.columnResizing,\n          startX: null,\n          isResizingColumn: null,\n        },\n      }))\n    }\n\n    document.addEventListener('mousemove', onMouseMove)\n    document.addEventListener('mouseup', onMouseUp)\n\n    setState(old => ({\n      ...old,\n      columnResizing: {\n        ...old.columnResizing,\n        startX,\n        isResizingColumn: header.id,\n      },\n    }))\n  }\n\n  flatHeaders.forEach(header => {\n    const canResize = getFirstDefined(\n      header.disableResizing === true ? false : undefined,\n      disableResizing === true ? false : undefined,\n      true\n    )\n\n    header.canResize = canResize\n    header.width = columnResizing.columnWidths[header.id] || header.width\n    header.isResizing = columnResizing.isResizingColumn === header.id\n\n    if (canResize) {\n      header.getResizerProps = userProps => {\n        return mergeProps(\n          {\n            onMouseDown: e => e.persist() || onMouseDown(e, header),\n            style: {\n              cursor: 'ew-resize',\n            },\n            draggable: false,\n          },\n          applyPropHooks(instance.hooks.getResizerProps, header, instance),\n          userProps\n        )\n      }\n    }\n  })\n\n  return instance\n}\n\nfunction getLeafHeaders(header) {\n  const leafHeaders = []\n  const recurseHeader = header => {\n    if (header.columns && header.columns.length) {\n      header.columns.map(recurseHeader)\n    }\n    leafHeaders.push(header)\n  }\n  recurseHeader(header)\n  return leafHeaders\n}\n","import PropTypes from 'prop-types'\n\nconst propTypes = {}\n\nexport const useAbsoluteLayout = hooks => {\n  hooks.useMain.push(useMain)\n}\n\nuseAbsoluteLayout.pluginName = 'useAbsoluteLayout'\n\nconst useMain = instance => {\n  PropTypes.checkPropTypes(propTypes, instance, 'property', 'useAbsoluteLayout')\n\n  const {\n    totalColumnsWidth,\n    hooks: {\n      getRowProps,\n      getTableBodyProps,\n      getHeaderGroupProps,\n      getHeaderProps,\n      getCellProps,\n    },\n  } = instance\n\n  const rowStyles = {\n    style: {\n      position: 'relative',\n      width: `${totalColumnsWidth}px`,\n    },\n  }\n\n  getTableBodyProps.push(() => rowStyles)\n  getRowProps.push(() => rowStyles)\n  getHeaderGroupProps.push(() => rowStyles)\n\n  // Calculating column/cells widths\n  const cellStyles = {\n    position: 'absolute',\n    top: 0,\n  }\n\n  getHeaderProps.push(header => {\n    return {\n      style: {\n        ...cellStyles,\n        left: `${header.totalLeft}px`,\n        width: `${header.totalWidth}px`,\n      },\n    }\n  })\n\n  getCellProps.push(cell => {\n    return {\n      style: {\n        ...cellStyles,\n        left: `${cell.column.totalLeft}px`,\n        width: `${cell.column.totalWidth}px`,\n      },\n    }\n  })\n\n  return instance\n}\n","import React from \"react\";\nimport { useTable, useSortBy } from 'react-table';\n\nfunction SortedTable({ columns, data}) {\n  const {\n    getTableProps,\n    getTableBodyProps,\n    headerGroups,\n    rows,\n    prepareRow,\n  } = useTable({\n    columns,\n    data\n  }, useSortBy);\n\n  const theadRows = headerGroups.map(headerGroup => (\n    <tr {...headerGroup.getHeaderGroupProps()}>\n      {headerGroup.headers.map(column => (\n        <th {...column.getHeaderProps(column.getSortByToggleProps())}>\n          {column.render('Header')}\n\n          <span>\n            {column.isSorted\n              ? column.isSortedDesc\n                ? ' 🔽'\n                : ' 🔼'\n              : ''}\n          </span>\n        </th>\n      ))}\n    </tr>\n  ));\n\n  const tbodyRows = rows.map((row, i) => (\n    prepareRow(row) || <tr {...row.getRowProps()}>\n      {row.cells.map(cell => (\n        <td {...cell.getCellProps()}>\n          {cell.render('Cell')}\n        </td>\n      ))}\n    </tr>\n  ));\n\n  return <table {...getTableProps()}>\n    <thead>\n      {theadRows}\n    </thead>\n    <tbody {...getTableBodyProps()}>\n      {tbodyRows}\n    </tbody>\n  </table>;\n}\n\nexport default SortedTable;","import React from \"react\";\nimport styled from \"styled-components\";\n\nimport SortedTable from \"./SortedTable\";\n\nconst columns = [\n  {\n    Header: 'Name',\n    columns: [\n      {\n        Header: 'First Name',\n        accessor: 'firstName',\n      },\n      {\n        Header: 'Last Name',\n        accessor: 'lastName',\n      },\n    ],\n  },\n  {\n    Header: 'Info',\n    columns: [\n      {\n        Header: 'Age',\n        accessor: 'age',\n      },\n      {\n        Header: 'Visits',\n        accessor: 'visits',\n      },\n      {\n        Header: 'Status',\n        accessor: 'status',\n      },\n      {\n        Header: 'Profile Progress',\n        accessor: 'progress',\n      },\n    ],\n  }\n];\n\nconst data = makeData(20);\n\nfunction Simple() {\n  return <Style>\n    <SortedTable\n      columns={columns}\n      data={data}\n    />\n  </Style>;\n}\n\nconst Style = styled.div`\n  width: 100%;\n  max-height: 50vh;\n  overflow: auto;\n\n  table {\n    width: 100%;\n\n    border-spacing: 0;\n    border: 1px solid black;\n\n    thead {\n      tr { \n        th {\n          background: white;\n          position: sticky;\n          top: 0;\n          z-index: 10;\n        }\n      }\n    }\n\n    tr {\n      :last-child {\n        td {\n          border-bottom: 0;\n        }\n      }\n    }\n\n    th,\n    td {\n      margin: 0;\n      padding: 0.5rem;\n      border-bottom: 1px solid black;\n      border-right: 1px solid black;\n\n      :last-child {\n        border-right: 0;\n      }\n    }\n  }\n`;\n\nfunction range(len) {\n  const arr = []\n  for (let i = 0; i < len; i++) {\n    arr.push(i)\n  }\n  return arr\n}\n\nfunction newPerson() {\n  const statusChance = Math.random()\n  return {\n    firstName: 'Gustavo',\n    lastName: 'Novaes',\n    age: Math.floor(Math.random() * 30),\n    visits: Math.floor(Math.random() * 100),\n    progress: Math.floor(Math.random() * 100),\n    status:\n      statusChance > 0.66\n        ? 'relationship'\n        : statusChance > 0.33\n          ? 'complicated'\n          : 'single',\n  }\n}\n\nfunction makeData(...lens) {\n  const makeDataLevel = (depth = 0) => {\n    const len = lens[depth]\n    return range(len).map(d => {\n      return {\n        ...newPerson(),\n        subRows: lens[depth + 1] ? makeDataLevel(depth + 1) : undefined,\n      }\n    })\n  }\n\n  return makeDataLevel()\n}\n\nexport default Simple;"]}